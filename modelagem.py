import streamlit as st
import pandas as pd
import streamlit as st

def mostrar():
    st.title("Modelagem")

    # Injetando CSS para remover qualquer resqu√≠cio de vermelho e ajustar anima√ß√µes
    st.markdown("""
        <style>
        /* Aba ativa */
        div[data-baseweb="tab-list"] button[aria-selected="true"] {
            color: #6d97b2 !important;  /* Cor do texto da aba ativa */
            border-bottom: 3px solid #6d97b2 !important;  /* Linha inferior da aba ativa */
            font-weight: bold !important;  /* Deixa o texto em negrito */
        }

        /* Quando o mouse passa por cima */
        div[data-baseweb="tab-list"] button:hover {
            color: #6d97b2 !important;  /* Muda a cor do texto no hover */
            border-bottom: 3px solid #6d97b2 !important;  /* Linha inferior no hover */
        }

        /* Corrige a anima√ß√£o vermelha ao selecionar uma aba */
        div[data-baseweb="tab-list"] button {
            transition: all 0.3s ease-in-out !important;  /* Suaviza a transi√ß√£o */
        }

        /* Removendo qualquer efeito vermelho padr√£o */
        div[data-baseweb="tab-highlight"] {
            background-color: #6d97b2 !important;  /* Substitui a cor da anima√ß√£o */
        }
        </style>
    """, unsafe_allow_html=True)

    # Criando abas para navega√ß√£o interna
    abas = st.tabs(["Prepara√ß√£o dos Dados", "Modelagem","Conclus√£o"])

    with abas[0]:
        st.subheader("4. Prepara√ß√£o dos Dados",divider="gray")
        st.markdown("""
        <div style="background-color:#f5f5f5; padding:20px; border-radius:10px; border-left:5px solid #1E88E5;">
        Nesta etapa, a prepara√ß√£o dos dados √© fundamental para garantir a efic√°cia dos modelos preditivos. Para isso, s√£o realizadas tr√™s principais a√ß√µes: transforma√ß√£o da s√©rie temporal em estacion√°ria, defini√ß√£o dos par√¢metros para modelagem e divis√£o dos dados em treino e teste.        </div>
        """, unsafe_allow_html=True)

        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("4.1 Estacionariedade",divider="gray")
        st.markdown("""
        Uma s√©rie temporal √© considerada estacion√°ria quando possui   propriedade   estat√≠sticas  razoavelmente est√°veis ao longo do tempo (no que se diz sobre m√©dia e √† vari√¢ncia).
        Ao longo da An√°lise Explorat√≥ria dos Dados a s√©rie temporal apresentou caracteristicas n√£o estacionar√°rias. O teste ADF (valor-p = 0,15) confirmou essa caracter√≠stica, evidenciando a necessidade de transforma√ß√£o (diferencia√ß√£o) da s√©rie para garantir a estacionariedade e permitir uma modelagem mais precisa.
        Uma vez que a estacionariedade reduz a influ√™ncia de tend√™ncias e facilita a identifica√ß√£o de padr√µes relevantes.
        """, unsafe_allow_html=True)

        with st.expander("Teste ADF"): 
            st.code("""
                    # Executar o teste de Dickey-Fuller Aumentado (ADF)
                    adf_result = sm.tsa.adfuller(df["fechamento"])

                    # Organizar os resultados em um DataFrame
                    adf_table = pd.DataFrame({
                        "M√©trica": ["Estat√≠stica ADF", "Valor-p", "Valor Cr√≠tico 1%", "Valor Cr√≠tico 5%", "Valor Cr√≠tico 10%"],
                        "Valor": [round(adf_result[0], 2), round(adf_result[1], 2),
                                round(adf_result[4]['1%'], 2), round(adf_result[4]['5%'], 2),
                                round(adf_result[4]['10%'], 2)]
                    })

                    # Exibir a tabela formatada
                    print(adf_table.to_string(index=False))

                    # Verificar se a s√©rie √© estacion√°ria
                    if adf_result[1] < 0.05:
                        print("A s√©rie temporal √© estacion√°ria")
                    else:
                        print("A s√©rie temporal n√£o √© estacion√°ria")
                                    """, language="python")
            # Criando o DataFrame com os dados
            dados = {
                "M√©trica": [
                    "Estat√≠stica ADF", 
                    "Valor-p", 
                    "Valor Cr√≠tico 1%", 
                    "Valor Cr√≠tico 5%", 
                    "Valor Cr√≠tico 10%"
                ],
                "Valor": [
                    -2.36, 
                    0.15, 
                    -3.43, 
                    -2.86, 
                    -2.57
                ]
            }
            df = pd.DataFrame(dados)
            # Exibindo a tabela
            st.write(df)
            # Adicionando uma observa√ß√£o
            st.markdown("**A s√©rie temporal n√£o √© estacion√°ria.**")

        #Diferencia√ß√£o
        st.markdown('<p style="font-size:20px; font-weight:bold; color:#1E3D59">4.1.1 Diferencia√ß√£o para estacionariedade </p>', unsafe_allow_html=True)
        st.write("""
            A fim de garantir a qualidade das an√°lises e previs√µes, a s√©rie temporal foi transformada em estacion√°ria por meio da diferencia√ß√£o. Essa etapa √© fundamental para remover componentes n√£o estacion√°rios, como tend√™ncias e sazonalidades, que podem prejudicar a modelagem.
            """)
        with st.expander("Resultado"): 
            st.write("""
            A estacionariedade da s√©rie, confirmada pelo teste ADF e Gr√°fico 16, permite dar prosseguimento √† pr√≥xima etapa que consiste em identificar os par√¢metros mais adequados para os modelos, a fim de capturar a din√¢mica da s√©rie e gerar previs√µes precisas.
            """)
            st.code("""
            # Diferenciar a s√©rie uma vez e remover valores NaN
            df_diff = df["fechamento"].diff().dropna()

                # Executar o teste de Dickey-Fuller Aumentado (ADF) na s√©rie diferenciada
                adf_result = sm.tsa.adfuller(df_diff)

                # Organizar os resultados em um DataFrame
                adf_table = pd.DataFrame({
                    "M√©trica": ["Estat√≠stica ADF", "Valor-p", "Valor Cr√≠tico 1%", "Valor Cr√≠tico 5%", "Valor Cr√≠tico 10%"],
                    "Valor": [round(adf_result[0], 2), round(adf_result[1], 2),
                            round(adf_result[4]['1%'], 2), round(adf_result[4]['5%'], 2),
                            round(adf_result[4]['10%'], 2)]
                })

                # Exibir a tabela formatada
                print(adf_table.to_string(index=False))

                # Verificar se a s√©rie diferenciada √© estacion√°ria
                if adf_result[1] < 0.05:
                    print("A s√©rie temporal diferenciada √© estacion√°ria")
                else:
                    print("A s√©rie temporal diferenciada n√£o √© estacion√°ria")
            """, language="python")

            # Criando o DataFrame com os dados
            dados = {
                "M√©trica": [
                    "Estat√≠stica ADF", 
                    "Valor-p", 
                    "Valor Cr√≠tico 1%", 
                    "Valor Cr√≠tico 5%", 
                    "Valor Cr√≠tico 10%"
                ],
                "Valor": [
                    -15.76, 
                    0.00, 
                    -3.43, 
                    -2.86, 
                    -2.57
                ]
            }
            df = pd.DataFrame(dados)
            # Exibindo a tabela
            st.write(df)
            # Adicionando uma observa√ß√£o
            st.markdown("**A s√©rie temporal diferenciada √© estacion√°ria.**")

            # Carregar o SVG
            with open("imagens/18.svg", "r", encoding="utf-8") as f:
                svg_content = f.read()

            # Exibir o SVG de forma responsiva
            st.markdown(f"""
                <div style="width: 100%; height: auto; min-width: 200px; min-height: 200px; display: flex; justify-content: left;">
                    {svg_content}
                """, unsafe_allow_html=True)
            # Adicionar a legenda (caption) abaixo do gr√°fico
            st.markdown("**Gr√°fico 16:** Transforma√ß√£o para Estacionariedade: Compara√ß√£o entre a s√©rie original n√£o estacion√°ria e a s√©rie diferenciada, estacion√°ria, obtida por meio da primeira diferen√ßa.", unsafe_allow_html=True)

        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("4.2 Defini√ß√£o dos par√¢metros para modelagem",divider="gray")
        st.markdown("""
        Determinar os coeficientes de autoregress√£o (ARIMA) e os par√¢metros sazonais (SARIMA), √© uma etapa essencial para capturar a estrutura temporal dos dados e melhorar a precis√£o das previs√µes.
        """, unsafe_allow_html=True)

        #Coeficientes de autoregress√£o (ARIMA)
        st.markdown('<p style="font-size:20px; font-weight:bold; color:#1E3D59">4.2.1 Coeficientes de autoregress√£o (ARIMA) </p>', unsafe_allow_html=True)
        st.write("""
            Uma vez que a s√©rie temporal √© estacionaria √© poss√≠vel obter os coeficientes de regress√£o : p, d e q. Esses coeficientes s√£o essenciais para construir um modelo ARIMA adequado, que consiga capturar as din√¢micas da s√©rie temporal de forma eficaz, permitindo previs√µes mais precisas.

            * ACF √© usada para determinar o par√¢metro ùëû, identificando a ordem da parte de m√©dias m√≥veis do modelo.
            * PACF √© usada para determinar o par√¢metro ùëù, identificando a ordem da parte autoregressiva do modelo.
            *ùëë foi previamente identificado como o n√∫mero de diferencia√ß√µes necess√°rias para tornar a s√©rie estacion√°ria.
        """)
        with st.expander("**Resultado obtido:** (2, 1, 227)"): 
            st.code("""
            #C√≥digo utilizado para obter o par√¢metro
            acf_x = sm.tsa.acf(df["fechamento"], alpha=0.05, nlags=500) #consigo apartir de 227
            acf, ci = acf_x[:2]
            # identifica√ß√£o do q pelo ponto de intercepta√ß√£o ao 95% com o acf
            q = np.where(abs(acf) < (ci[:, 1] - acf))[0][0]

            pacf_x = sm.tsa.pacf(df["fechamento"], alpha=0.05, nlags=30) #apartir de 2 dias
            pacf, ci = pacf_x[:2]
            # identifica√ß√£o do p pelo ponto de intercepta√ß√£o ao 95% com o pacf
            p = np.where(abs(pacf) < (ci[:, 1] - pacf))[0][0]

            d = 1  # apenas 1 diferencia√ß√£o foi necess√°ria para tornar a s√©rie estacion√°ria

            #parametros do modelo ARIMA (autorregressivel com a m√©dia m√≥vel)

            print("Valor de p:", p)
            print("Valor de d:", d)
            print("Valor de q:", q)
            
            """, language="python")
            # Criando o DataFrame com os dados
            dados = {
                "M√©trica": [
                    "Valor de p", 
                    "Valor de d", 
                    "Valor de q"
                ],
                "Valor": [
                    2, 
                    1, 
                    227
                ]
            }
            df = pd.DataFrame(dados)
            # Exibindo a tabela no Streamlit
            st.write(df)

        #Par√¢metros de sazonalidade (SARIMA)
        st.markdown('<p style="font-size:20px; font-weight:bold; color:#1E3D59">4.2.2 Par√¢metros de sazonalidade (SARIMA) </p>', unsafe_allow_html=True)
        st.write("""
            Para determinar os par√¢metros de sazonalidade, foi utilizada a fun√ß√£o model = pm.auto_arima.
        """)
        with st.expander("**Resultado obtido:** ARIMA(3,1,2)(1,0,0)[12] - SARIMA(3,1,2)(1,0,0,12)[12]"): 
            st.write('Esse modelo (1, 0, 0, 12) indica um ciclo sazonal de 12 meses, mas n√£o leva em conta a autocorrela√ß√£o ou a m√©dia m√≥vel sazonal. Essa configura√ß√£o sugere que a s√©rie temporal apresenta um padr√£o sazonal regular, sem complexidades adicionais.')
            st.code("""
            #C√≥digo utilizado para obter o par√¢metro
            model = pm.auto_arima(
                df["fechamento"],
                seasonal=True,
                m=12,
                stepwise=True,
                trace=True,
            )

            # Summary of the model's detected parameters
            print(model.summary())

            # Detected seasonal order
            seasonal_order = model.seasonal_order
            print(f"Detected Seasonal Order: {seasonal_order}")
            """, language="python")
            
            # Carregar o imagem
            st.image("imagens/sarimax.png", width=700)
    
        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("4.3 Dividindo os Dados em Treino e Teste",divider="gray")
        st.markdown("""
            Para avaliar a performance do modelo, os dados foram divididos em conjuntos de treinamento (70%) e teste (30%). O modelo foi treinado com o conjunto de treino e, em seguida, avaliado com o conjunto de teste.""", unsafe_allow_html=True)
        
        with st.expander("**Resultado obtido:** "): 
            st.code("""
            #C√≥digo utilizado dividir dataset em treino e teste
            train_size = int(df.shape[0] * 0.7)  # 70% dos dados para treino
            train, test = df[:train_size], df[train_size:]

            # Prepara√ß√£o dos dados para XGBoost (usando a data do √≠ndice)
            def create_features(modelo_df):
                modelo_df = modelo_df.copy()  # Evitar altera√ß√µes na vers√£o original
                modelo_df["year"] = modelo_df.index.year
                modelo_df["month"] = modelo_df.index.month
                modelo_df["day"] = modelo_df.index.day
                modelo_df["dayofweek"] = modelo_df.index.dayofweek
                return modelo_df

            train = create_features(train)
            test = create_features(test)

            FEATURES = ["year", "month", "day", "dayofweek", "abertura"]
            TARGET = "fechamento"
                    
            # Configura√ß√µes do gr√°fico
            plt.figure(figsize=(22, 4))
            plt.gca().set_facecolor('#fdfefe')
            plt.grid(color='lightgray', linestyle='--', linewidth=0.5)

            # Plotando os dados de treino e teste
            plt.plot(train.index, train['fechamento'], color='#607d8b', linewidth=1, label='Treinamento')
            plt.plot(test.index, test['fechamento'], color='#52be80', linewidth=1, label='Teste')

            # Configura√ß√µes dos r√≥tulos e t√≠tulo
            plt.xlabel('Data', fontsize=12)
            plt.ylabel('Fechamento', fontsize=12)
            plt.title('Dados de Treinamento e Teste do Brent', fontsize=14)
            plt.legend()

            # Exibindo o gr√°fico
            plt.show()
            
            """, language="python")
            # Carregar o SVG
            with open("imagens/19.svg", "r", encoding="utf-8") as f:
                svg_content = f.read()
            # Exibir o SVG de forma responsiva
            st.markdown(f"""
                <div style="width: 100%; height: auto; min-width: 200px; min-height: 200px; display: flex; justify-content: left;">
                    {svg_content}
            """, unsafe_allow_html=True)

            # Adicionar a legenda (caption) abaixo do gr√°fico
            st.markdown("**Gr√°fico 17:** Divis√£o dos Dados do Brent: Treino e Teste.", unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)     
       
    with abas[1]:
        st.subheader("5. Modelagem",divider="gray")
        st.markdown("""
        <div style="background-color:#f5f5f5; padding:20px; border-radius:10px; border-left:5px solid #1E88E5;">
        Ap√≥s a prepara√ß√£o dos dados, ser√° realizada a escolha do modelo de previs√£o, que √© crucial para obter previs√µes precisas. Tr√™s modelos de aprendizado ser√£o testados com dados de treinamento e teste, e o desempenho ser√° avaliado pelo MAPE (Mean Absolute Percentage Error) para identificar o ajuste mais adequado aos dados do Brent.
        
        > O MAPE mostra o quanto, em m√©dia, as previs√µes de um modelo est√£o erradas em rela√ß√£o aos valores reais, expressando esse erro em porcentagem. Logo, **quanto menor o MAPE melhor**.
        </div>
        """, unsafe_allow_html=True)

        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("5.1 Modelo XGBoost",divider="gray")
        st.write("""
        **O que √©:** O XGBoost √© um algoritmo de machine learning baseado em boosting de √°rvores de decis√£o, conhecido por seu alto desempenho, mas suscet√≠vel a overfitting e menos adequado para s√©ries temporais que requerem m√©dias m√≥veis, como em s√©ries temporais financeiras.
        
        **Resultado:** XGBoost teve um MAPE de 2.64%.
        
        **Observa√ß√µes:** Este modelo demonstra excelente precis√£o (97,36%) na previs√£o dos pre√ßos do Brent. Observa-se um ajuste muito pr√≥ximo entre as linhas de previs√£o (laranja) e dados reais (azul) ao longo de todo o per√≠odo 2020-2025. O modelo captura com efici√™ncia tanto os picos quanto as quedas bruscas, incluindo a queda hist√≥rica durante a pandemia em 2020. √â not√°vel como as previs√µes acompanham precisamente at√© mesmo as pequenas flutua√ß√µes di√°rias.
        """)
        with st.expander("**Resultado obtido:** "): 
            st.code("""
            # Modelo XGBoost
            X_train, y_train = train[FEATURES], train[TARGET]
            X_test, y_test = test[FEATURES], test[TARGET]

            reg = xgb.XGBRegressor(objective="reg:squarederror")
            reg.fit(X_train, y_train)

            # Avalia√ß√£o XGBoost
            preds = reg.predict(X_test)
            metrics_xgb = calculate_metrics(y_test, preds)
            print("XGBoost Metrics:")
            print_metrics(metrics_xgb)
            """, language="python")

            # Criando o DataFrame com os dados
            dados = {
                "M√©trica": [
                    "MAE", 
                    "MSE", 
                    "MAPE"
                ],
                "Valor": [
                    round(1.5832083125812249, 2), 
                    round(5.4108420147725536, 2), 
                    "2.64 %"
                ]
            }
            df = pd.DataFrame(dados)
            # Exibindo a tabela no Streamlit
            st.write(df)
            
            st.code("""
                # Plotar resultados
                plt.figure(figsize=(22, 4))
                plt.plot(test.index, y_test, label='Dados Reais', color='blue', linewidth=1)  # Linha real
                plt.plot(test.index, preds, label='Previs√µes', color='orange', linewidth=1)  # Previs√µes
                plt.title('Previs√£o com Modelo XGBoost - 97.36%')
                plt.xlabel('Data')
                plt.ylabel('Fechamento')
                plt.legend()
                plt.grid()
                plt.show()
            """, language="python")

            # Carregar o SVG
            with open("imagens/20.svg", "r", encoding="utf-8") as f:
                svg_content = f.read()
            # Exibir o SVG de forma responsiva
            st.markdown(f"""
                <div style="width: 100%; height: auto; min-width: 200px; min-height: 200px; display: flex; justify-content: left;">
                    {svg_content}
            """, unsafe_allow_html=True)

            # Adicionar a legenda (caption) abaixo do gr√°fico
            st.markdown("**Gr√°fico 18:** Desempenho do Modelo XGBoost. O gr√°fico mostra uma compara√ß√£o entre os dados reais do Brent (em azul) e as previs√µes geradas por um modelo XGBoost (em laranja) ao longo do tempo.", unsafe_allow_html=True)
            st.markdown("<br>", unsafe_allow_html=True) 

        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("5.2 Modelo Prophet",divider="gray")
        st.write("""
        **O que √©:** O Prophet √© um modelo de previs√£o de s√©ries temporais, desenvolvido pelo Facebook, que lida bem com tend√™ncias e sazonalidades. Ele utiliza m√©dias m√≥veis e suaviza√ß√£o exponencial para ajustar tend√™ncias de longo prazo, capturando varia√ß√µes sazonais e eventos externos, sendo eficaz em dados financeiros complexos.
        
        **Resultado:** O Prophet teve um MAPE de 20.35 %.
        
        **Observa√ß√µes:** Este modelo apresenta a menor precis√£o (79,65%) entre os tr√™s. Diferentemente dos outros, o Prophet mostra um intervalo de confian√ßa (√°rea cinza) e cobre um per√≠odo hist√≥rico mais longo (desde 2008). Observa-se que as previs√µes come√ßam apenas em 2020, e h√° diverg√™ncias significativas em alguns per√≠odos, especialmente em 2023-2024, onde o modelo n√£o captura adequadamente algumas oscila√ß√µes de pre√ßo.
        """)
        with st.expander("**Resultado obtido:** "): 
            st.code("""
                # Ajustando os dados para Prophet
                train_prophet = train.rename(columns={"fechamento": "y"}).copy()
                train_prophet["ds"] = train_prophet.index

                test_prophet = test.rename(columns={"fechamento": "y"}).copy()
                test_prophet["ds"] = test_prophet.index

                # Criando o modelo Prophet
                model = Prophet(daily_seasonality=True)
                model.add_regressor("abertura")
                model.fit(train_prophet)

                # Criando datas futuras para a previs√£o
                future = model.make_future_dataframe(periods=len(test))
                future = future.set_index("ds").join(pd.concat([train, test])["abertura"]).reset_index()

                # Preenchendo valores ausentes de "abertura"
                future["abertura"] = future["abertura"].ffill()

                # Fazendo previs√£o
                forecast = model.predict(future)

                # Preparando os dados para avalia√ß√£o
                preds = forecast[["ds", "yhat"]].set_index("ds").tail(len(test))
                y_test = test_prophet.set_index("ds")["y"]

                # Calculando m√©tricas
                metrics_pr = calculate_metrics(y_test, preds["yhat"])
                print("Prophet Metrics:")
                print_metrics(metrics_pr)
            """, language="python")

            # Criando o DataFrame com os dados
            dados = {
                "M√©trica": [
                    "MAE", 
                    "MSE", 
                    "MAPE"
                ],
                "Valor": [
                    round(14.749836402334529, 2), 
                    round(358.9347409005401, 2), 
                    "20.35 %"
                ]
            }
            df = pd.DataFrame(dados)
            # Exibindo a tabela no Streamlit
            st.write(df)
            
            st.code("""
                # Plotar resultados do modelo prophet
                plt.figure(figsize=(20, 4))
                plt.plot(y_test.index, y_test, label='Dados Reais', color='blue', linewidth=0.5)  # Linha fina
                plt.plot(preds.index, preds['yhat'], label='Previs√µes', color='orange', linewidth=0.5)  # Linha fina
                plt.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'], color='gray', alpha=0.2, label='Intervalo de Confian√ßa', linewidth=0.5)
                plt.title('Previs√£o com Modelo Prophe - 79.65%')
                plt.xlabel('Data')
                plt.ylabel('Fechamento')
                plt.legend()
                plt.grid()
                plt.show()
            """, language="python")

            # Carregar o SVG
            with open("imagens/21.svg", "r", encoding="utf-8") as f:
                svg_content = f.read()
            # Exibir o SVG de forma responsiva
            st.markdown(f"""
                <div style="width: 100%; height: auto; min-width: 200px; min-height: 200px; display: flex; justify-content: left;">
                    {svg_content}
            """, unsafe_allow_html=True)

            # Adicionar a legenda (caption) abaixo do gr√°fico
            st.markdown("**Gr√°fico 19:** Desempenho do Modelo Prophet. O gr√°fico apresenta a previs√£o do modelo Prophet aplicado √† s√©rie temporal do Brent, comparando dados reais (linha azul) com as previs√µes do modelo (linha laranja) e o intervalo de confian√ßa (√°rea cinza).", unsafe_allow_html=True)
            st.markdown("<br>", unsafe_allow_html=True) 


        st.markdown("<br>", unsafe_allow_html=True)
        st.subheader("5.3 Modelo SARIMAX",divider="gray")
        st.write("""
        **O que √©:** O SARIMAX √© um modelo de s√©ries temporais que integra autoregress√£o, m√©dias m√≥veis, sazonalidade e vari√°veis ex√≥genas, sendo especialmente √∫til para dados financeiros com padr√µes sazonais e influenciados por fatores externos, como taxas de juros e indicadores econ√¥micos.
                 
        **Resultado:** O SARIMAX teve um MAPE de 1.73 %.
        
        **Observa√ß√µes:** Este modelo apresenta a maior precis√£o entre os tr√™s (98,27%). As linhas de previs√£o e valores reais praticamente se sobrep√µem, tornando dif√≠cil distinguir uma da outra em v√°rios trechos. O SARIMAX captura com excel√™ncia os movimentos de alta volatilidade (como o pico de 2022) e tamb√©m os per√≠odos de tend√™ncia. O ajuste √© excepcionalmente bom em todo o intervalo temporal analisado.
        """)
        with st.expander("**Resultado obtido:** "): 
            st.code("""
            # Modelo SARIMAX
            # p, d, q = (2, 1, 227)
            exog_train = train[["abertura"]]
            exog_test = test[["abertura"]]

            model = sm.tsa.statespace.SARIMAX(
                train["abertura"],
                exog=exog_train,
                order=(
                    p,
                    d,
                    10,
                ),  # q muito grande faz com que o modelo fique muito complexo e lento
                seasonal_order=(1, 0, 0, 12),
            )
            results = model.fit()

            preds = results.get_forecast(steps=len(test), exog=exog_test).predicted_mean

            metrics_sarimax = calculate_metrics(test["fechamento"], preds)
            print("SARIMAX Metrics:")
            print_metrics(metrics_sarimax)
            """, language="python")

            # Criando o DataFrame com os dados
            dados = {
                "M√©trica": [
                    "MAE", 
                    "MSE", 
                    "MAPE"
                ],
                "Valor": [
                    round(1.2281504296386694, 2), 
                    round(3.124917408120124, 2), 
                    "1.73 %"
                ]
            }
            df = pd.DataFrame(dados)
            # Exibindo a tabela no Streamlit
            st.write(df)
            
            st.code("""
                # Plotando os resultados
                plt.figure(figsize=(18, 4))
                plt.plot(test.index, test["fechamento"], label='Valor Esperado (Real)', color='blue', linestyle='--')
                plt.plot(test.index, preds, label='Valor Previsto SARIMAX', color='orange')
                plt.title('Compara√ß√£o entre Valor Esperado e Valor Previsto com SARIMAX - 98.27%')
                plt.xlabel('Data')
                plt.ylabel('Fechamento')
                plt.legend()
                plt.xticks(rotation=45)  # Rotaciona as labels do eixo x para melhor legibilidade
                plt.grid()
                plt.tight_layout()
                plt.show()
            """, language="python")

            # Carregar o SVG
            with open("imagens/22.svg", "r", encoding="utf-8") as f:
                svg_content = f.read()
            # Exibir o SVG de forma responsiva
            st.markdown(f"""
                <div style="width: 100%; height: auto; min-width: 200px; min-height: 200px; display: flex; justify-content: left;">
                    {svg_content}
            """, unsafe_allow_html=True)

            # Adicionar a legenda (caption) abaixo do gr√°fico
            st.markdown("**Gr√°fico 20:** Desempenho do Modelo SARIMAX. O gr√°fico apresenta a previs√£o do modelo SARIMAX aplicado √† s√©rie temporal do Brent, comparando dados reais (linha azul) com as previs√µes do modelo (linha laranja).", unsafe_allow_html=True)
            st.markdown("<br>", unsafe_allow_html=True) 

    with abas[2]:
            st.subheader("6. Conclus√£o",divider="gray")
            st.markdown("""
            <div style="background-color:#f5f5f5; padding:20px; border-radius:10px; border-left:5px solid #1E88E5;">
            Para avaliar a precis√£o das previs√µes, tr√™s modelos foram comparados: SARIMAX, Prophet e XGBoost. Utilizando o erro percentual m√©dio absoluto (MAPE) como m√©trica, o <b>SARIMAX apresentou o melhor desempenho, com um MAPE de 1,74%</b>
            . O XGBoost, com um MAPE de 2,64%, tamb√©m demonstrou bons resultados. J√° o Prophet, com um MAPE significativamente maior (20,35%), mostrou dificuldades em capturar as nuances dos dados da s√©rie do Brent.
            """, unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            st.write("""
                Diante dos resultados, o modelo SARIMAX se mostrou o mais adequado para prever o comportamento complexo do Brent pelos seguintes motivos:

                1. Apresenta a maior precis√£o (98,27%) entre os tr√™s modelos analisados.
                2. Captura com excel√™ncia tanto tend√™ncias quanto flutua√ß√µes de curto prazo
                3. Seu desempenho √© consistente ao longo de todo o per√≠odo analisado
                4. Alinha-se com a caracter√≠stica de autocorrela√ß√£o do Brent identificada anteriormente, onde os coeficientes PACF indicavam a import√¢ncia dos lags mais recentes, enquanto o ACF mostrava persist√™ncia - caracter√≠sticas que o SARIMAX √© especialmente projetado para modelar atrav√©s de seus componentes sazonal e autorregressivo
                5. √â particularmente adequado para s√©ries temporais com potenciais componentes sazonais, como o mercado de petr√≥leo que pode sofrer influ√™ncias c√≠clicas de fatores econ√¥micos e geopol√≠ticos.
                6. Apesar do XGBoost apresentar resultado muito pr√≥ximo o SARIMAX demonstra ligeira superioridade na precis√£o e maior adequa√ß√£o conceitual √† estrutura temporal identificada na s√©rie do Brent.
                
            """)

            st.warning('Para obter mais informa√ß√µes sobre as m√©tricas e c√≥digos utilizados na an√°lise e plotagem, acesse o Jupyter desenvolvido no Google Colab.', icon="‚ö†Ô∏è")
